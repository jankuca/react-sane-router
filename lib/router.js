// Generated by CoffeeScript 1.10.0
var React, Router, StatusCodes, Target, areLocationsEqual, areTargetsEqual, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

React = require('react');

Target = require('./components/target');

StatusCodes = require('./status-codes');

ref = require('./utils'), areLocationsEqual = ref.areLocationsEqual, areTargetsEqual = ref.areTargetsEqual;

Router = (function() {
  Router.prototype.StatusCodes = StatusCodes;

  function Router(services) {
    this._handleLocation = bind(this._handleLocation, this);
    this._contentStore = services.contentStore;
    this._dispatcher = services.dispatcher;
    this._historyManager = services.historyManager;
    this._locationStore = services.locationStore;
    this._routeStore = services.routeStore;
  }

  Router.prototype.createTargetElement = function() {
    return React.createElement(Target, {
      "contentStore": this._contentStore
    });
  };

  Router.prototype.init = function() {
    return this._disposeHistoryListener = this._historyManager.listen(this._handleLocation);
  };

  Router.prototype.dispose = function() {
    var ref1;
    return (ref1 = this._disposeHistoryListener) != null ? ref1.call(null) : void 0;
  };

  Router.prototype.setLocationBase = function(locationBase) {
    return this._dispatcher.emit('location-base-set', {
      locationBase: locationBase
    });
  };

  Router.prototype.setRoutes = function(routes) {
    this._dispatcher.emit('routes-set', {
      routes: routes
    });
    return this._routeToCurrentLocation();
  };

  Router.prototype.registerTarget = function(targetKey, content) {
    this._dispatcher.emit('target-add', {
      targetKey: targetKey,
      content: content
    });
    return this._routeToCurrentLocation();
  };

  Router.prototype.redirectToUrl = function(url) {
    var locationBase;
    locationBase = this._locationStore.getLocationBase();
    if (locationBase) {
      url = "" + locationBase + url;
    }
    return this._historyManager.pushState(null, url);
  };

  Router.prototype.goBack = function() {
    return this.go(-1);
  };

  Router.prototype.goForward = function() {
    return this.go(+1);
  };

  Router.prototype.go = function(delta) {
    var err, error;
    try {
      return this._historyManager.go(delta);
    } catch (error) {
      err = error;
      return err.name === 'Invariant Violation';
      throw err;
    }
  };

  Router.prototype.reload = function() {
    var target;
    target = this._contentStore.getCurrentTarget();
    return this._dispatcher.emit('target-activate', target);
  };

  Router.prototype._handleLocation = function(location) {
    var currentLocation;
    currentLocation = this._locationStore.getCurrentLocation();
    if (areLocationsEqual(currentLocation, location)) {
      return;
    }
    this._dispatcher.emit('location-set', {
      location: location
    });
    return this._routeToCurrentLocation();
  };

  Router.prototype._routeToCurrentLocation = function() {
    var location;
    location = this._locationStore.getEffectiveLocation();
    return this._routeToLocation(location);
  };

  Router.prototype._routeToLocation = function(location) {
    var currentTarget, nextTarget;
    currentTarget = this._contentStore.getCurrentTarget();
    nextTarget = this._routeStore.getLocationTarget(location);
    if (areTargetsEqual(currentTarget, nextTarget)) {
      return;
    }
    return this._dispatcher.emit('target-activate', nextTarget);
  };

  return Router;

})();
