// Generated by CoffeeScript 1.10.0
var ContentStore, EventEmitter, RouteTargetResolver, StatusCodes, urlmatch,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

urlmatch = require('url-match');

EventEmitter = require('events').EventEmitter;

RouteTargetResolver = require('../route-target-resolver');

StatusCodes = require('../status-codes');

ContentStore = (function(superClass) {
  extend(ContentStore, superClass);

  function ContentStore(arg) {
    var dispatcher;
    dispatcher = arg.dispatcher;
    this._handleTargetActivate = bind(this._handleTargetActivate, this);
    this._handleTargetAdd = bind(this._handleTargetAdd, this);
    this._handleRoutes = bind(this._handleRoutes, this);
    this._dispatcher = dispatcher;

    /** @type {!Array.<{ match: function(string): Array }>} */
    this._routes = [];

    /**
     * @type {!Object.<
     *   (string|StatusCodes),
     *   (string|StatusCodes|ReactElement|
     *     function(Object.<string, string>):(string|StatusCodes|ReactElement))
     * >}
     */
    this._targets = {};

    /** @type {!Object.<string, string|number>} */
    this._currentTargetParams = {};

    /** @type {string|StatusCodes|null} */
    this._currentTargetPath = null;

    /** @type {string|StatusCodes|ReactElement} */
    this._currentTargetElement = null;
  }

  ContentStore.prototype.init = function() {
    this._dispatcher.on('routes-set', this._handleRoutes);
    this._dispatcher.on('target-add', this._handleTargetAdd);
    return this._dispatcher.on('target-activate', this._handleTargetActivate);
  };

  ContentStore.prototype.getLocationTarget = function(location) {
    var aliasedLocation, params, ref, targetPath;
    ref = this._getLocationRoute(location), targetPath = ref.targetPath, params = ref.params;
    if (/^\//.test(targetPath)) {
      aliasedLocation = {
        pathname: targetPath
      };
      return this.getLocationTarget(aliasedLocation);
    }
    return {
      targetPath: targetPath,
      params: params
    };
  };

  ContentStore.prototype._getLocationRoute = function(location) {
    var params, pathname, targetPath;
    pathname = (location != null ? location.pathname : void 0) || '/';
    targetPath = null;
    params = {};
    this._routes.some(function(route) {
      var match;
      match = route.pattern.match(pathname);
      if (match) {
        targetPath = route.targetPath;
        params = match.namedParams;
        return true;
      }
    });
    return {
      targetPath: targetPath,
      params: params
    };
  };

  ContentStore.prototype.getCurrentTarget = function() {
    return {
      targetPath: this._currentTargetPath,
      params: this._currentTargetParams
    };
  };

  ContentStore.prototype.getTargetElement = function(targetPath, params) {
    var resolver;
    resolver = new RouteTargetResolver(this._targets);
    return resolver.resolveTarget(targetPath, params);
  };

  ContentStore.prototype.getCurrentTargetElement = function() {
    return this._currentTargetElement;
  };

  ContentStore.prototype._handleRoutes = function(arg) {
    var routes;
    routes = arg.routes;
    this._routes = Object.keys(routes).map((function(_this) {
      return function(pathnamePattern) {
        var pattern;
        pattern = urlmatch.generate(pathnamePattern);
        return {
          pattern: pattern,
          targetPath: routes[pathnamePattern]
        };
      };
    })(this));
    this._updateCurrentTargetElement();
    return this.emit('change');
  };

  ContentStore.prototype._handleTargetAdd = function(arg) {
    var targetKey, targetStates, targetStatusCode;
    targetKey = arg.targetKey, targetStates = arg.targetStates, targetStatusCode = arg.targetStatusCode;
    this._targets[targetKey] = targetStates || targetStatusCode || null;
    this._updateCurrentTargetElement();
    return this.emit('change');
  };

  ContentStore.prototype._handleTargetActivate = function(arg) {
    var params, targetPath;
    targetPath = arg.targetPath, params = arg.params;
    this._currentTargetPath = targetPath;
    this._currentTargetParams = params;
    this._updateCurrentTargetElement();
    return this.emit('change');
  };

  ContentStore.prototype._updateCurrentTargetElement = function() {
    if (this._currentTargetPath) {
      return this._currentTargetElement = this.getTargetElement(this._currentTargetPath, this._currentTargetParams);
    } else {
      return this._currentTargetElement = this.getTargetElement(StatusCodes.NOT_FOUND);
    }
  };

  return ContentStore;

})(EventEmitter);

module.exports = ContentStore;
