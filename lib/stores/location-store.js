// Generated by CoffeeScript 1.10.0
var EventEmitter, LocationStore, startsWith,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

startsWith = require('../utils').startsWith;

LocationStore = (function(superClass) {
  extend(LocationStore, superClass);

  function LocationStore(arg) {
    var dispatcher;
    dispatcher = arg.dispatcher;
    this._handleLocationBase = bind(this._handleLocationBase, this);
    this._handleLocation = bind(this._handleLocation, this);
    this._dispatcher = dispatcher;
    this._locationBase = null;
    this._currentLocation = null;
    this._effectiveLocation = null;
  }

  LocationStore.prototype.init = function() {
    this._dispatcher.on('location-set', this._handleLocation);
    return this._dispatcher.on('location-base-set', this._handleLocationBase);
  };

  LocationStore.prototype.getLocationBase = function() {
    return this._locationBase;
  };

  LocationStore.prototype.getCurrentLocation = function() {
    return this._currentLocation;
  };

  LocationStore.prototype.getEffectiveLocation = function() {
    return this._effectiveLocation;
  };

  LocationStore.prototype._handleLocation = function(arg) {
    var location;
    location = arg.location;
    this._currentLocation = location;
    this._updateEffectiveLocation();
    return this.emit('change');
  };

  LocationStore.prototype._handleLocationBase = function(arg) {
    var locationBase;
    locationBase = arg.locationBase;
    if (locationBase) {
      locationBase = locationBase.replace(/\/$/, '');
    }
    this._locationBase = locationBase || null;
    this._updateEffectiveLocation();
    return this.emit('change');
  };

  LocationStore.prototype._updateEffectiveLocation = function() {
    var currentPathname, locationBase, ref;
    locationBase = this._locationBase;
    currentPathname = ((ref = this._currentLocation) != null ? ref.pathname : void 0) || null;
    if (!currentPathname || !locationBase) {
      return this._effectiveLocation = this._currentLocation;
    } else if (startsWith(currentPathname + '/', locationBase + '/')) {
      return this._effectiveLocation = {
        pathname: currentPathname.substr(locationBase.length)
      };
    } else {
      return this._effectiveLocation = null;
    }
  };

  return LocationStore;

})(EventEmitter);

module.exports = LocationStore;
