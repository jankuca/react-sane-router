// Generated by CoffeeScript 1.10.0
var EventEmitter, RouteStore, urlmatch,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

urlmatch = require('url-match');

EventEmitter = require('events').EventEmitter;

RouteStore = (function(superClass) {
  extend(RouteStore, superClass);

  function RouteStore(arg) {
    var dispatcher;
    dispatcher = arg.dispatcher;
    this._handleRoutes = bind(this._handleRoutes, this);
    this._dispatcher = dispatcher;

    /** @type {!Array.<{ match: function(string): Array }>} */
    this._routes = [];
  }

  RouteStore.prototype.init = function() {
    return this._dispatcher.on('routes-set', this._handleRoutes);
  };

  RouteStore.prototype.getLocationTarget = function(location) {
    var aliasedLocation, aliasedPathname, params, ref, targetPath;
    ref = this._getLocationRoute(location), targetPath = ref.targetPath, params = ref.params;
    if (/^\//.test(targetPath)) {
      aliasedPathname = this._createPathname(targetPath, params);
      aliasedLocation = {
        pathname: aliasedPathname
      };
      return this.getLocationTarget(aliasedLocation);
    }
    return {
      targetPath: targetPath,
      params: params
    };
  };

  RouteStore.prototype._getLocationRoute = function(location) {
    var params, pathname, targetPath;
    pathname = (location != null ? location.pathname : void 0) || '/';
    targetPath = null;
    params = {};
    this._routes.some(function(route) {
      var match;
      match = route.pattern.match(pathname);
      if (match) {
        targetPath = route.targetPath;
        params = match.namedParams;
        return true;
      }
    });
    return {
      targetPath: targetPath,
      params: params
    };
  };

  RouteStore.prototype._createPathname = function(pattern, params) {
    var applyParam, pathname;
    applyParam = function(pathname, key) {
      return pathname.replace(new RegExp(":" + key, 'g'), params[key]);
    };
    pathname = Object.keys(params).reduce(applyParam, pattern);
    return pathname;
  };

  RouteStore.prototype._handleRoutes = function(arg) {
    var routes;
    routes = arg.routes;
    this._routes = Object.keys(routes).map((function(_this) {
      return function(pathnamePattern) {
        var pattern;
        pattern = urlmatch.generate(pathnamePattern);
        return {
          pattern: pattern,
          targetPath: routes[pathnamePattern]
        };
      };
    })(this));
    return this.emit('change');
  };

  return RouteStore;

})(EventEmitter);

module.exports = RouteStore;
